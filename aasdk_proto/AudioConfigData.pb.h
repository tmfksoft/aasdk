// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AudioConfigData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AudioConfigData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AudioConfigData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AudioConfigData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AudioConfigData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AudioConfigData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class AudioConfig;
class AudioConfigDefaultTypeInternal;
extern AudioConfigDefaultTypeInternal _AudioConfig_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::data::AudioConfig* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::AudioConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class AudioConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.AudioConfig) */ {
 public:
  inline AudioConfig() : AudioConfig(nullptr) {};
  virtual ~AudioConfig();

  AudioConfig(const AudioConfig& from);
  AudioConfig(AudioConfig&& from) noexcept
    : AudioConfig() {
    *this = ::std::move(from);
  }

  inline AudioConfig& operator=(const AudioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioConfig& operator=(AudioConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AudioConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioConfig* internal_default_instance() {
    return reinterpret_cast<const AudioConfig*>(
               &_AudioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AudioConfig& a, AudioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AudioConfig* New() const final {
    return CreateMaybeMessage<AudioConfig>(nullptr);
  }

  AudioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AudioConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AudioConfig& from);
  void MergeFrom(const AudioConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.data.AudioConfig";
  }
  protected:
  explicit AudioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AudioConfigData_2eproto);
    return ::descriptor_table_AudioConfigData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleRateFieldNumber = 1,
    kBitDepthFieldNumber = 2,
    kChannelCountFieldNumber = 3,
  };
  // uint32 sample_rate = 1;
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bit_depth = 2;
  void clear_bit_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_depth() const;
  void set_bit_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bit_depth() const;
  void _internal_set_bit_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel_count = 3;
  void clear_channel_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count() const;
  void set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_count() const;
  void _internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.AudioConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bit_depth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AudioConfigData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AudioConfig

// uint32 sample_rate = 1;
inline void AudioConfig::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AudioConfig.sample_rate)
  return _internal_sample_rate();
}
inline void AudioConfig::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sample_rate_ = value;
}
inline void AudioConfig::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AudioConfig.sample_rate)
}

// uint32 bit_depth = 2;
inline void AudioConfig::clear_bit_depth() {
  bit_depth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::_internal_bit_depth() const {
  return bit_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::bit_depth() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AudioConfig.bit_depth)
  return _internal_bit_depth();
}
inline void AudioConfig::_internal_set_bit_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bit_depth_ = value;
}
inline void AudioConfig::set_bit_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bit_depth(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AudioConfig.bit_depth)
}

// uint32 channel_count = 3;
inline void AudioConfig::clear_channel_count() {
  channel_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::_internal_channel_count() const {
  return channel_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AudioConfig::channel_count() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.AudioConfig.channel_count)
  return _internal_channel_count();
}
inline void AudioConfig::_internal_set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_count_ = value;
}
inline void AudioConfig::set_channel_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_count(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.AudioConfig.channel_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AudioConfigData_2eproto
