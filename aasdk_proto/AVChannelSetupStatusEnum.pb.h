// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVChannelSetupStatusEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AVChannelSetupStatusEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AVChannelSetupStatusEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AVChannelSetupStatusEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AVChannelSetupStatusEnum_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AVChannelSetupStatusEnum_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
class AVChannelSetupStatus;
class AVChannelSetupStatusDefaultTypeInternal;
extern AVChannelSetupStatusDefaultTypeInternal _AVChannelSetupStatus_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::enums::AVChannelSetupStatus* Arena::CreateMaybeMessage<::f1x::aasdk::proto::enums::AVChannelSetupStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {

enum AVChannelSetupStatus_Enum : int {
  AVChannelSetupStatus_Enum_NONE = 0,
  AVChannelSetupStatus_Enum_FAIL = 1,
  AVChannelSetupStatus_Enum_OK = 2,
  AVChannelSetupStatus_Enum_AVChannelSetupStatus_Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AVChannelSetupStatus_Enum_AVChannelSetupStatus_Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AVChannelSetupStatus_Enum_IsValid(int value);
constexpr AVChannelSetupStatus_Enum AVChannelSetupStatus_Enum_Enum_MIN = AVChannelSetupStatus_Enum_NONE;
constexpr AVChannelSetupStatus_Enum AVChannelSetupStatus_Enum_Enum_MAX = AVChannelSetupStatus_Enum_OK;
constexpr int AVChannelSetupStatus_Enum_Enum_ARRAYSIZE = AVChannelSetupStatus_Enum_Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AVChannelSetupStatus_Enum_descriptor();
template<typename T>
inline const std::string& AVChannelSetupStatus_Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AVChannelSetupStatus_Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AVChannelSetupStatus_Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AVChannelSetupStatus_Enum_descriptor(), enum_t_value);
}
inline bool AVChannelSetupStatus_Enum_Parse(
    const std::string& name, AVChannelSetupStatus_Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AVChannelSetupStatus_Enum>(
    AVChannelSetupStatus_Enum_descriptor(), name, value);
}
// ===================================================================

class AVChannelSetupStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.enums.AVChannelSetupStatus) */ {
 public:
  inline AVChannelSetupStatus() : AVChannelSetupStatus(nullptr) {};
  virtual ~AVChannelSetupStatus();

  AVChannelSetupStatus(const AVChannelSetupStatus& from);
  AVChannelSetupStatus(AVChannelSetupStatus&& from) noexcept
    : AVChannelSetupStatus() {
    *this = ::std::move(from);
  }

  inline AVChannelSetupStatus& operator=(const AVChannelSetupStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AVChannelSetupStatus& operator=(AVChannelSetupStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AVChannelSetupStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AVChannelSetupStatus* internal_default_instance() {
    return reinterpret_cast<const AVChannelSetupStatus*>(
               &_AVChannelSetupStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AVChannelSetupStatus& a, AVChannelSetupStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AVChannelSetupStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AVChannelSetupStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AVChannelSetupStatus* New() const final {
    return CreateMaybeMessage<AVChannelSetupStatus>(nullptr);
  }

  AVChannelSetupStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AVChannelSetupStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AVChannelSetupStatus& from);
  void MergeFrom(const AVChannelSetupStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AVChannelSetupStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.enums.AVChannelSetupStatus";
  }
  protected:
  explicit AVChannelSetupStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AVChannelSetupStatusEnum_2eproto);
    return ::descriptor_table_AVChannelSetupStatusEnum_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AVChannelSetupStatus_Enum Enum;
  static constexpr Enum NONE =
    AVChannelSetupStatus_Enum_NONE;
  static constexpr Enum FAIL =
    AVChannelSetupStatus_Enum_FAIL;
  static constexpr Enum OK =
    AVChannelSetupStatus_Enum_OK;
  static inline bool Enum_IsValid(int value) {
    return AVChannelSetupStatus_Enum_IsValid(value);
  }
  static constexpr Enum Enum_MIN =
    AVChannelSetupStatus_Enum_Enum_MIN;
  static constexpr Enum Enum_MAX =
    AVChannelSetupStatus_Enum_Enum_MAX;
  static constexpr int Enum_ARRAYSIZE =
    AVChannelSetupStatus_Enum_Enum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Enum_descriptor() {
    return AVChannelSetupStatus_Enum_descriptor();
  }
  template<typename T>
  static inline const std::string& Enum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Enum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Enum_Name.");
    return AVChannelSetupStatus_Enum_Name(enum_t_value);
  }
  static inline bool Enum_Parse(const std::string& name,
      Enum* value) {
    return AVChannelSetupStatus_Enum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.enums.AVChannelSetupStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AVChannelSetupStatusEnum_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AVChannelSetupStatus

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::f1x::aasdk::proto::enums::AVChannelSetupStatus_Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::f1x::aasdk::proto::enums::AVChannelSetupStatus_Enum>() {
  return ::f1x::aasdk::proto::enums::AVChannelSetupStatus_Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AVChannelSetupStatusEnum_2eproto
