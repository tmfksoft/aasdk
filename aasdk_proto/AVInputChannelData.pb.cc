// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AVInputChannelData.proto

#include "AVInputChannelData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AudioConfigData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioConfig_AudioConfigData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class AVInputChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AVInputChannel> _instance;
} _AVInputChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static void InitDefaultsscc_info_AVInputChannel_AVInputChannelData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::data::_AVInputChannel_default_instance_;
    new (ptr) ::f1x::aasdk::proto::data::AVInputChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::data::AVInputChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AVInputChannel_AVInputChannelData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AVInputChannel_AVInputChannelData_2eproto}, {
      &scc_info_AudioConfig_AudioConfigData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AVInputChannelData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AVInputChannelData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AVInputChannelData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AVInputChannelData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::AVInputChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::AVInputChannel, stream_type_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::AVInputChannel, audio_config_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::AVInputChannel, available_while_in_call_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::f1x::aasdk::proto::data::AVInputChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::data::_AVInputChannel_default_instance_),
};

const char descriptor_table_protodef_AVInputChannelData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030AVInputChannelData.proto\022\024f1x.aasdk.pr"
  "oto.data\032\026AVStreamTypeEnum.proto\032\025AudioC"
  "onfigData.proto\"\251\001\n\016AVInputChannel\022=\n\013st"
  "ream_type\030\001 \001(\0162(.f1x.aasdk.proto.enums."
  "AVStreamType.Enum\0227\n\014audio_config\030\002 \001(\0132"
  "!.f1x.aasdk.proto.data.AudioConfig\022\037\n\027av"
  "ailable_while_in_call\030\003 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AVInputChannelData_2eproto_deps[2] = {
  &::descriptor_table_AVStreamTypeEnum_2eproto,
  &::descriptor_table_AudioConfigData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AVInputChannelData_2eproto_sccs[1] = {
  &scc_info_AVInputChannel_AVInputChannelData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AVInputChannelData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AVInputChannelData_2eproto = {
  false, false, descriptor_table_protodef_AVInputChannelData_2eproto, "AVInputChannelData.proto", 275,
  &descriptor_table_AVInputChannelData_2eproto_once, descriptor_table_AVInputChannelData_2eproto_sccs, descriptor_table_AVInputChannelData_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_AVInputChannelData_2eproto::offsets,
  file_level_metadata_AVInputChannelData_2eproto, 1, file_level_enum_descriptors_AVInputChannelData_2eproto, file_level_service_descriptors_AVInputChannelData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AVInputChannelData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AVInputChannelData_2eproto)), true);
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

void AVInputChannel::InitAsDefaultInstance() {
  ::f1x::aasdk::proto::data::_AVInputChannel_default_instance_._instance.get_mutable()->audio_config_ = const_cast< ::f1x::aasdk::proto::data::AudioConfig*>(
      ::f1x::aasdk::proto::data::AudioConfig::internal_default_instance());
}
class AVInputChannel::_Internal {
 public:
  static const ::f1x::aasdk::proto::data::AudioConfig& audio_config(const AVInputChannel* msg);
};

const ::f1x::aasdk::proto::data::AudioConfig&
AVInputChannel::_Internal::audio_config(const AVInputChannel* msg) {
  return *msg->audio_config_;
}
void AVInputChannel::clear_audio_config() {
  if (GetArena() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
}
AVInputChannel::AVInputChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.data.AVInputChannel)
}
AVInputChannel::AVInputChannel(const AVInputChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio_config()) {
    audio_config_ = new ::f1x::aasdk::proto::data::AudioConfig(*from.audio_config_);
  } else {
    audio_config_ = nullptr;
  }
  ::memcpy(&stream_type_, &from.stream_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&available_while_in_call_) -
    reinterpret_cast<char*>(&stream_type_)) + sizeof(available_while_in_call_));
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.data.AVInputChannel)
}

void AVInputChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AVInputChannel_AVInputChannelData_2eproto.base);
  ::memset(&audio_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_while_in_call_) -
      reinterpret_cast<char*>(&audio_config_)) + sizeof(available_while_in_call_));
}

AVInputChannel::~AVInputChannel() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.data.AVInputChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AVInputChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete audio_config_;
}

void AVInputChannel::ArenaDtor(void* object) {
  AVInputChannel* _this = reinterpret_cast< AVInputChannel* >(object);
  (void)_this;
}
void AVInputChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AVInputChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AVInputChannel& AVInputChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AVInputChannel_AVInputChannelData_2eproto.base);
  return *internal_default_instance();
}


void AVInputChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.data.AVInputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
  ::memset(&stream_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&available_while_in_call_) -
      reinterpret_cast<char*>(&stream_type_)) + sizeof(available_while_in_call_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AVInputChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stream_type(static_cast<::f1x::aasdk::proto::enums::AVStreamType_Enum>(val));
        } else goto handle_unusual;
        continue;
      // .f1x.aasdk.proto.data.AudioConfig audio_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool available_while_in_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          available_while_in_call_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AVInputChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.data.AVInputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  if (this->stream_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stream_type(), target);
  }

  // .f1x.aasdk.proto.data.AudioConfig audio_config = 2;
  if (this->has_audio_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_config(this), target, stream);
  }

  // bool available_while_in_call = 3;
  if (this->available_while_in_call() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_available_while_in_call(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.data.AVInputChannel)
  return target;
}

size_t AVInputChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.data.AVInputChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .f1x.aasdk.proto.data.AudioConfig audio_config = 2;
  if (this->has_audio_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_config_);
  }

  // .f1x.aasdk.proto.enums.AVStreamType.Enum stream_type = 1;
  if (this->stream_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stream_type());
  }

  // bool available_while_in_call = 3;
  if (this->available_while_in_call() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AVInputChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.data.AVInputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const AVInputChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AVInputChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.data.AVInputChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.data.AVInputChannel)
    MergeFrom(*source);
  }
}

void AVInputChannel::MergeFrom(const AVInputChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.data.AVInputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio_config()) {
    _internal_mutable_audio_config()->::f1x::aasdk::proto::data::AudioConfig::MergeFrom(from._internal_audio_config());
  }
  if (from.stream_type() != 0) {
    _internal_set_stream_type(from._internal_stream_type());
  }
  if (from.available_while_in_call() != 0) {
    _internal_set_available_while_in_call(from._internal_available_while_in_call());
  }
}

void AVInputChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.data.AVInputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AVInputChannel::CopyFrom(const AVInputChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.data.AVInputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AVInputChannel::IsInitialized() const {
  return true;
}

void AVInputChannel::InternalSwap(AVInputChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AVInputChannel, available_while_in_call_)
      + sizeof(AVInputChannel::available_while_in_call_)
      - PROTOBUF_FIELD_OFFSET(AVInputChannel, audio_config_)>(
          reinterpret_cast<char*>(&audio_config_),
          reinterpret_cast<char*>(&other->audio_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AVInputChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::data::AVInputChannel* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::data::AVInputChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::data::AVInputChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
