// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavigationChannelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NavigationChannelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NavigationChannelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "NavigationImageOptionsData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NavigationChannelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NavigationChannelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NavigationChannelData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class NavigationChannel;
class NavigationChannelDefaultTypeInternal;
extern NavigationChannelDefaultTypeInternal _NavigationChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::data::NavigationChannel* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::NavigationChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class NavigationChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.NavigationChannel) */ {
 public:
  inline NavigationChannel() : NavigationChannel(nullptr) {};
  virtual ~NavigationChannel();

  NavigationChannel(const NavigationChannel& from);
  NavigationChannel(NavigationChannel&& from) noexcept
    : NavigationChannel() {
    *this = ::std::move(from);
  }

  inline NavigationChannel& operator=(const NavigationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationChannel& operator=(NavigationChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationChannel* internal_default_instance() {
    return reinterpret_cast<const NavigationChannel*>(
               &_NavigationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NavigationChannel& a, NavigationChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationChannel* New() const final {
    return CreateMaybeMessage<NavigationChannel>(nullptr);
  }

  NavigationChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationChannel& from);
  void MergeFrom(const NavigationChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.data.NavigationChannel";
  }
  protected:
  explicit NavigationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NavigationChannelData_2eproto);
    return ::descriptor_table_NavigationChannelData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageOptionsFieldNumber = 3,
    kMinimumIntervalMsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .f1x.aasdk.proto.data.NavigationImageOptions image_options = 3;
  bool has_image_options() const;
  private:
  bool _internal_has_image_options() const;
  public:
  void clear_image_options();
  const ::f1x::aasdk::proto::data::NavigationImageOptions& image_options() const;
  ::f1x::aasdk::proto::data::NavigationImageOptions* release_image_options();
  ::f1x::aasdk::proto::data::NavigationImageOptions* mutable_image_options();
  void set_allocated_image_options(::f1x::aasdk::proto::data::NavigationImageOptions* image_options);
  private:
  const ::f1x::aasdk::proto::data::NavigationImageOptions& _internal_image_options() const;
  ::f1x::aasdk::proto::data::NavigationImageOptions* _internal_mutable_image_options();
  public:
  void unsafe_arena_set_allocated_image_options(
      ::f1x::aasdk::proto::data::NavigationImageOptions* image_options);
  ::f1x::aasdk::proto::data::NavigationImageOptions* unsafe_arena_release_image_options();

  // uint32 minimum_interval_ms = 1;
  void clear_minimum_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 minimum_interval_ms() const;
  void set_minimum_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minimum_interval_ms() const;
  void _internal_set_minimum_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.NavigationChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::f1x::aasdk::proto::data::NavigationImageOptions* image_options_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minimum_interval_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NavigationChannelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavigationChannel

// uint32 minimum_interval_ms = 1;
inline void NavigationChannel::clear_minimum_interval_ms() {
  minimum_interval_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationChannel::_internal_minimum_interval_ms() const {
  return minimum_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationChannel::minimum_interval_ms() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.NavigationChannel.minimum_interval_ms)
  return _internal_minimum_interval_ms();
}
inline void NavigationChannel::_internal_set_minimum_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minimum_interval_ms_ = value;
}
inline void NavigationChannel::set_minimum_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minimum_interval_ms(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.NavigationChannel.minimum_interval_ms)
}

// uint32 type = 2;
inline void NavigationChannel::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationChannel::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationChannel::type() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.NavigationChannel.type)
  return _internal_type();
}
inline void NavigationChannel::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void NavigationChannel::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.NavigationChannel.type)
}

// .f1x.aasdk.proto.data.NavigationImageOptions image_options = 3;
inline bool NavigationChannel::_internal_has_image_options() const {
  return this != internal_default_instance() && image_options_ != nullptr;
}
inline bool NavigationChannel::has_image_options() const {
  return _internal_has_image_options();
}
inline const ::f1x::aasdk::proto::data::NavigationImageOptions& NavigationChannel::_internal_image_options() const {
  const ::f1x::aasdk::proto::data::NavigationImageOptions* p = image_options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::f1x::aasdk::proto::data::NavigationImageOptions*>(
      &::f1x::aasdk::proto::data::_NavigationImageOptions_default_instance_);
}
inline const ::f1x::aasdk::proto::data::NavigationImageOptions& NavigationChannel::image_options() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.NavigationChannel.image_options)
  return _internal_image_options();
}
inline void NavigationChannel::unsafe_arena_set_allocated_image_options(
    ::f1x::aasdk::proto::data::NavigationImageOptions* image_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_options_);
  }
  image_options_ = image_options;
  if (image_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.data.NavigationChannel.image_options)
}
inline ::f1x::aasdk::proto::data::NavigationImageOptions* NavigationChannel::release_image_options() {
  auto temp = unsafe_arena_release_image_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::f1x::aasdk::proto::data::NavigationImageOptions* NavigationChannel::unsafe_arena_release_image_options() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.NavigationChannel.image_options)
  
  ::f1x::aasdk::proto::data::NavigationImageOptions* temp = image_options_;
  image_options_ = nullptr;
  return temp;
}
inline ::f1x::aasdk::proto::data::NavigationImageOptions* NavigationChannel::_internal_mutable_image_options() {
  
  if (image_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::f1x::aasdk::proto::data::NavigationImageOptions>(GetArena());
    image_options_ = p;
  }
  return image_options_;
}
inline ::f1x::aasdk::proto::data::NavigationImageOptions* NavigationChannel::mutable_image_options() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.NavigationChannel.image_options)
  return _internal_mutable_image_options();
}
inline void NavigationChannel::set_allocated_image_options(::f1x::aasdk::proto::data::NavigationImageOptions* image_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_options_);
  }
  if (image_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_options)->GetArena();
    if (message_arena != submessage_arena) {
      image_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_options, submessage_arena);
    }
    
  } else {
    
  }
  image_options_ = image_options;
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.NavigationChannel.image_options)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NavigationChannelData_2eproto
