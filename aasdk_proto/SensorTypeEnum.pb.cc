// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorTypeEnum.proto

#include "SensorTypeEnum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
class SensorTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorType> _instance;
} _SensorType_default_instance_;
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static void InitDefaultsscc_info_SensorType_SensorTypeEnum_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::enums::_SensorType_default_instance_;
    new (ptr) ::f1x::aasdk::proto::enums::SensorType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::enums::SensorType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorType_SensorTypeEnum_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SensorType_SensorTypeEnum_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SensorTypeEnum_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_SensorTypeEnum_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SensorTypeEnum_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SensorTypeEnum_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::enums::SensorType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::f1x::aasdk::proto::enums::SensorType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::enums::_SensorType_default_instance_),
};

const char descriptor_table_protodef_SensorTypeEnum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024SensorTypeEnum.proto\022\025f1x.aasdk.proto."
  "enums\"\274\002\n\nSensorType\"\255\002\n\004Enum\022\010\n\004NONE\020\000\022"
  "\014\n\010LOCATION\020\001\022\013\n\007COMPASS\020\002\022\r\n\tCAR_SPEED\020"
  "\003\022\007\n\003RPM\020\004\022\014\n\010ODOMETER\020\005\022\016\n\nFUEL_LEVEL\020\006"
  "\022\021\n\rPARKING_BRAKE\020\007\022\010\n\004GEAR\020\010\022\017\n\013DIAGNOS"
  "TICS\020\t\022\016\n\nNIGHT_DATA\020\n\022\017\n\013ENVIRONMENT\020\013\022"
  "\010\n\004HVAC\020\014\022\022\n\016DRIVING_STATUS\020\r\022\021\n\rDEAD_RE"
  "CONING\020\016\022\r\n\tPASSENGER\020\017\022\010\n\004DOOR\020\020\022\t\n\005LIG"
  "HT\020\021\022\010\n\004TIRE\020\022\022\t\n\005ACCEL\020\023\022\010\n\004GYRO\020\024\022\007\n\003G"
  "PS\020\025b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SensorTypeEnum_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SensorTypeEnum_2eproto_sccs[1] = {
  &scc_info_SensorType_SensorTypeEnum_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SensorTypeEnum_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SensorTypeEnum_2eproto = {
  false, false, descriptor_table_protodef_SensorTypeEnum_2eproto, "SensorTypeEnum.proto", 372,
  &descriptor_table_SensorTypeEnum_2eproto_once, descriptor_table_SensorTypeEnum_2eproto_sccs, descriptor_table_SensorTypeEnum_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_SensorTypeEnum_2eproto::offsets,
  file_level_metadata_SensorTypeEnum_2eproto, 1, file_level_enum_descriptors_SensorTypeEnum_2eproto, file_level_service_descriptors_SensorTypeEnum_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SensorTypeEnum_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SensorTypeEnum_2eproto)), true);
namespace f1x {
namespace aasdk {
namespace proto {
namespace enums {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_SensorTypeEnum_2eproto);
  return file_level_enum_descriptors_SensorTypeEnum_2eproto[0];
}
bool SensorType_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorType_Enum SensorType::NONE;
constexpr SensorType_Enum SensorType::LOCATION;
constexpr SensorType_Enum SensorType::COMPASS;
constexpr SensorType_Enum SensorType::CAR_SPEED;
constexpr SensorType_Enum SensorType::RPM;
constexpr SensorType_Enum SensorType::ODOMETER;
constexpr SensorType_Enum SensorType::FUEL_LEVEL;
constexpr SensorType_Enum SensorType::PARKING_BRAKE;
constexpr SensorType_Enum SensorType::GEAR;
constexpr SensorType_Enum SensorType::DIAGNOSTICS;
constexpr SensorType_Enum SensorType::NIGHT_DATA;
constexpr SensorType_Enum SensorType::ENVIRONMENT;
constexpr SensorType_Enum SensorType::HVAC;
constexpr SensorType_Enum SensorType::DRIVING_STATUS;
constexpr SensorType_Enum SensorType::DEAD_RECONING;
constexpr SensorType_Enum SensorType::PASSENGER;
constexpr SensorType_Enum SensorType::DOOR;
constexpr SensorType_Enum SensorType::LIGHT;
constexpr SensorType_Enum SensorType::TIRE;
constexpr SensorType_Enum SensorType::ACCEL;
constexpr SensorType_Enum SensorType::GYRO;
constexpr SensorType_Enum SensorType::GPS;
constexpr SensorType_Enum SensorType::Enum_MIN;
constexpr SensorType_Enum SensorType::Enum_MAX;
constexpr int SensorType::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SensorType::InitAsDefaultInstance() {
}
class SensorType::_Internal {
 public:
};

SensorType::SensorType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.enums.SensorType)
}
SensorType::SensorType(const SensorType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.enums.SensorType)
}

void SensorType::SharedCtor() {
}

SensorType::~SensorType() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.enums.SensorType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SensorType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SensorType::ArenaDtor(void* object) {
  SensorType* _this = reinterpret_cast< SensorType* >(object);
  (void)_this;
}
void SensorType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SensorType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorType& SensorType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorType_SensorTypeEnum_2eproto.base);
  return *internal_default_instance();
}


void SensorType::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.enums.SensorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.enums.SensorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.enums.SensorType)
  return target;
}

size_t SensorType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.enums.SensorType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.enums.SensorType)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.enums.SensorType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.enums.SensorType)
    MergeFrom(*source);
  }
}

void SensorType::MergeFrom(const SensorType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.enums.SensorType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SensorType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.enums.SensorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorType::CopyFrom(const SensorType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.enums.SensorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorType::IsInitialized() const {
  return true;
}

void SensorType::InternalSwap(SensorType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enums
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::enums::SensorType* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::enums::SensorType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::enums::SensorType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
