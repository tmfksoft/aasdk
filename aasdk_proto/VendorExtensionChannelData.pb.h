// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VendorExtensionChannelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VendorExtensionChannelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VendorExtensionChannelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VendorExtensionChannelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VendorExtensionChannelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VendorExtensionChannelData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class VendorExtensionChannel;
class VendorExtensionChannelDefaultTypeInternal;
extern VendorExtensionChannelDefaultTypeInternal _VendorExtensionChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::data::VendorExtensionChannel* Arena::CreateMaybeMessage<::f1x::aasdk::proto::data::VendorExtensionChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

class VendorExtensionChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.data.VendorExtensionChannel) */ {
 public:
  inline VendorExtensionChannel() : VendorExtensionChannel(nullptr) {};
  virtual ~VendorExtensionChannel();

  VendorExtensionChannel(const VendorExtensionChannel& from);
  VendorExtensionChannel(VendorExtensionChannel&& from) noexcept
    : VendorExtensionChannel() {
    *this = ::std::move(from);
  }

  inline VendorExtensionChannel& operator=(const VendorExtensionChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VendorExtensionChannel& operator=(VendorExtensionChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VendorExtensionChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VendorExtensionChannel* internal_default_instance() {
    return reinterpret_cast<const VendorExtensionChannel*>(
               &_VendorExtensionChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VendorExtensionChannel& a, VendorExtensionChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(VendorExtensionChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VendorExtensionChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VendorExtensionChannel* New() const final {
    return CreateMaybeMessage<VendorExtensionChannel>(nullptr);
  }

  VendorExtensionChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VendorExtensionChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VendorExtensionChannel& from);
  void MergeFrom(const VendorExtensionChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VendorExtensionChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.data.VendorExtensionChannel";
  }
  protected:
  explicit VendorExtensionChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_VendorExtensionChannelData_2eproto);
    return ::descriptor_table_VendorExtensionChannelData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageWhiteListFieldNumber = 2,
    kNameFieldNumber = 1,
    kDataFieldNumber = 3,
  };
  // repeated string package_white_list = 2;
  int package_white_list_size() const;
  private:
  int _internal_package_white_list_size() const;
  public:
  void clear_package_white_list();
  const std::string& package_white_list(int index) const;
  std::string* mutable_package_white_list(int index);
  void set_package_white_list(int index, const std::string& value);
  void set_package_white_list(int index, std::string&& value);
  void set_package_white_list(int index, const char* value);
  void set_package_white_list(int index, const char* value, size_t size);
  std::string* add_package_white_list();
  void add_package_white_list(const std::string& value);
  void add_package_white_list(std::string&& value);
  void add_package_white_list(const char* value);
  void add_package_white_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& package_white_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_package_white_list();
  private:
  const std::string& _internal_package_white_list(int index) const;
  std::string* _internal_add_package_white_list();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.data.VendorExtensionChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> package_white_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_VendorExtensionChannelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VendorExtensionChannel

// string name = 1;
inline void VendorExtensionChannel::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VendorExtensionChannel::name() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.VendorExtensionChannel.name)
  return _internal_name();
}
inline void VendorExtensionChannel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}
inline std::string* VendorExtensionChannel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.VendorExtensionChannel.name)
  return _internal_mutable_name();
}
inline const std::string& VendorExtensionChannel::_internal_name() const {
  return name_.Get();
}
inline void VendorExtensionChannel::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VendorExtensionChannel::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}
inline void VendorExtensionChannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}
inline void VendorExtensionChannel::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}
inline std::string* VendorExtensionChannel::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VendorExtensionChannel::release_name() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.VendorExtensionChannel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VendorExtensionChannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}
inline std::string* VendorExtensionChannel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.data.VendorExtensionChannel.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VendorExtensionChannel::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.data.VendorExtensionChannel.name)
}

// repeated string package_white_list = 2;
inline int VendorExtensionChannel::_internal_package_white_list_size() const {
  return package_white_list_.size();
}
inline int VendorExtensionChannel::package_white_list_size() const {
  return _internal_package_white_list_size();
}
inline void VendorExtensionChannel::clear_package_white_list() {
  package_white_list_.Clear();
}
inline std::string* VendorExtensionChannel::add_package_white_list() {
  // @@protoc_insertion_point(field_add_mutable:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  return _internal_add_package_white_list();
}
inline const std::string& VendorExtensionChannel::_internal_package_white_list(int index) const {
  return package_white_list_.Get(index);
}
inline const std::string& VendorExtensionChannel::package_white_list(int index) const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  return _internal_package_white_list(index);
}
inline std::string* VendorExtensionChannel::mutable_package_white_list(int index) {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  return package_white_list_.Mutable(index);
}
inline void VendorExtensionChannel::set_package_white_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  package_white_list_.Mutable(index)->assign(value);
}
inline void VendorExtensionChannel::set_package_white_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  package_white_list_.Mutable(index)->assign(std::move(value));
}
inline void VendorExtensionChannel::set_package_white_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  package_white_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline void VendorExtensionChannel::set_package_white_list(int index, const char* value, size_t size) {
  package_white_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline std::string* VendorExtensionChannel::_internal_add_package_white_list() {
  return package_white_list_.Add();
}
inline void VendorExtensionChannel::add_package_white_list(const std::string& value) {
  package_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline void VendorExtensionChannel::add_package_white_list(std::string&& value) {
  package_white_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline void VendorExtensionChannel::add_package_white_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  package_white_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline void VendorExtensionChannel::add_package_white_list(const char* value, size_t size) {
  package_white_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VendorExtensionChannel::package_white_list() const {
  // @@protoc_insertion_point(field_list:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  return package_white_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VendorExtensionChannel::mutable_package_white_list() {
  // @@protoc_insertion_point(field_mutable_list:f1x.aasdk.proto.data.VendorExtensionChannel.package_white_list)
  return &package_white_list_;
}

// bytes data = 3;
inline void VendorExtensionChannel::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VendorExtensionChannel::data() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.data.VendorExtensionChannel.data)
  return _internal_data();
}
inline void VendorExtensionChannel::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}
inline std::string* VendorExtensionChannel::mutable_data() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.data.VendorExtensionChannel.data)
  return _internal_mutable_data();
}
inline const std::string& VendorExtensionChannel::_internal_data() const {
  return data_.Get();
}
inline void VendorExtensionChannel::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VendorExtensionChannel::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}
inline void VendorExtensionChannel::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}
inline void VendorExtensionChannel::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}
inline std::string* VendorExtensionChannel::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VendorExtensionChannel::release_data() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.data.VendorExtensionChannel.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VendorExtensionChannel::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}
inline std::string* VendorExtensionChannel::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.data.VendorExtensionChannel.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VendorExtensionChannel::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.data.VendorExtensionChannel.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VendorExtensionChannelData_2eproto
