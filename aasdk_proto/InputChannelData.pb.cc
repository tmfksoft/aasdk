// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputChannelData.proto

#include "InputChannelData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TouchConfigData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TouchConfig_TouchConfigData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {
class InputChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputChannel> _instance;
} _InputChannel_default_instance_;
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static void InitDefaultsscc_info_InputChannel_InputChannelData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::data::_InputChannel_default_instance_;
    new (ptr) ::f1x::aasdk::proto::data::InputChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::data::InputChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InputChannel_InputChannelData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InputChannel_InputChannelData_2eproto}, {
      &scc_info_TouchConfig_TouchConfigData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_InputChannelData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_InputChannelData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_InputChannelData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_InputChannelData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, supported_keycodes_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, touch_screen_config_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::data::InputChannel, touch_pad_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::f1x::aasdk::proto::data::InputChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::data::_InputChannel_default_instance_),
};

const char descriptor_table_protodef_InputChannelData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026InputChannelData.proto\022\024f1x.aasdk.prot"
  "o.data\032\025TouchConfigData.proto\"\247\001\n\014InputC"
  "hannel\022\032\n\022supported_keycodes\030\001 \003(\r\022>\n\023to"
  "uch_screen_config\030\002 \001(\0132!.f1x.aasdk.prot"
  "o.data.TouchConfig\022;\n\020touch_pad_config\030\003"
  " \001(\0132!.f1x.aasdk.proto.data.TouchConfigb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_InputChannelData_2eproto_deps[1] = {
  &::descriptor_table_TouchConfigData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_InputChannelData_2eproto_sccs[1] = {
  &scc_info_InputChannel_InputChannelData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_InputChannelData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputChannelData_2eproto = {
  false, false, descriptor_table_protodef_InputChannelData_2eproto, "InputChannelData.proto", 247,
  &descriptor_table_InputChannelData_2eproto_once, descriptor_table_InputChannelData_2eproto_sccs, descriptor_table_InputChannelData_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_InputChannelData_2eproto::offsets,
  file_level_metadata_InputChannelData_2eproto, 1, file_level_enum_descriptors_InputChannelData_2eproto, file_level_service_descriptors_InputChannelData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_InputChannelData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_InputChannelData_2eproto)), true);
namespace f1x {
namespace aasdk {
namespace proto {
namespace data {

// ===================================================================

void InputChannel::InitAsDefaultInstance() {
  ::f1x::aasdk::proto::data::_InputChannel_default_instance_._instance.get_mutable()->touch_screen_config_ = const_cast< ::f1x::aasdk::proto::data::TouchConfig*>(
      ::f1x::aasdk::proto::data::TouchConfig::internal_default_instance());
  ::f1x::aasdk::proto::data::_InputChannel_default_instance_._instance.get_mutable()->touch_pad_config_ = const_cast< ::f1x::aasdk::proto::data::TouchConfig*>(
      ::f1x::aasdk::proto::data::TouchConfig::internal_default_instance());
}
class InputChannel::_Internal {
 public:
  static const ::f1x::aasdk::proto::data::TouchConfig& touch_screen_config(const InputChannel* msg);
  static const ::f1x::aasdk::proto::data::TouchConfig& touch_pad_config(const InputChannel* msg);
};

const ::f1x::aasdk::proto::data::TouchConfig&
InputChannel::_Internal::touch_screen_config(const InputChannel* msg) {
  return *msg->touch_screen_config_;
}
const ::f1x::aasdk::proto::data::TouchConfig&
InputChannel::_Internal::touch_pad_config(const InputChannel* msg) {
  return *msg->touch_pad_config_;
}
void InputChannel::clear_touch_screen_config() {
  if (GetArena() == nullptr && touch_screen_config_ != nullptr) {
    delete touch_screen_config_;
  }
  touch_screen_config_ = nullptr;
}
void InputChannel::clear_touch_pad_config() {
  if (GetArena() == nullptr && touch_pad_config_ != nullptr) {
    delete touch_pad_config_;
  }
  touch_pad_config_ = nullptr;
}
InputChannel::InputChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_keycodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.data.InputChannel)
}
InputChannel::InputChannel(const InputChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_keycodes_(from.supported_keycodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_touch_screen_config()) {
    touch_screen_config_ = new ::f1x::aasdk::proto::data::TouchConfig(*from.touch_screen_config_);
  } else {
    touch_screen_config_ = nullptr;
  }
  if (from._internal_has_touch_pad_config()) {
    touch_pad_config_ = new ::f1x::aasdk::proto::data::TouchConfig(*from.touch_pad_config_);
  } else {
    touch_pad_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.data.InputChannel)
}

void InputChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputChannel_InputChannelData_2eproto.base);
  ::memset(&touch_screen_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_pad_config_) -
      reinterpret_cast<char*>(&touch_screen_config_)) + sizeof(touch_pad_config_));
}

InputChannel::~InputChannel() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.data.InputChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InputChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete touch_screen_config_;
  if (this != internal_default_instance()) delete touch_pad_config_;
}

void InputChannel::ArenaDtor(void* object) {
  InputChannel* _this = reinterpret_cast< InputChannel* >(object);
  (void)_this;
}
void InputChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InputChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputChannel& InputChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputChannel_InputChannelData_2eproto.base);
  return *internal_default_instance();
}


void InputChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.data.InputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_keycodes_.Clear();
  if (GetArena() == nullptr && touch_screen_config_ != nullptr) {
    delete touch_screen_config_;
  }
  touch_screen_config_ = nullptr;
  if (GetArena() == nullptr && touch_pad_config_ != nullptr) {
    delete touch_pad_config_;
  }
  touch_pad_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 supported_keycodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_supported_keycodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_supported_keycodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_screen_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_pad_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InputChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.data.InputChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 supported_keycodes = 1;
  {
    int byte_size = _supported_keycodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_supported_keycodes(), byte_size, target);
    }
  }

  // .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
  if (this->has_touch_screen_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::touch_screen_config(this), target, stream);
  }

  // .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
  if (this->has_touch_pad_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::touch_pad_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.data.InputChannel)
  return target;
}

size_t InputChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.data.InputChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 supported_keycodes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->supported_keycodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supported_keycodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .f1x.aasdk.proto.data.TouchConfig touch_screen_config = 2;
  if (this->has_touch_screen_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *touch_screen_config_);
  }

  // .f1x.aasdk.proto.data.TouchConfig touch_pad_config = 3;
  if (this->has_touch_pad_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *touch_pad_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.data.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const InputChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.data.InputChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.data.InputChannel)
    MergeFrom(*source);
  }
}

void InputChannel::MergeFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.data.InputChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_keycodes_.MergeFrom(from.supported_keycodes_);
  if (from.has_touch_screen_config()) {
    _internal_mutable_touch_screen_config()->::f1x::aasdk::proto::data::TouchConfig::MergeFrom(from._internal_touch_screen_config());
  }
  if (from.has_touch_pad_config()) {
    _internal_mutable_touch_pad_config()->::f1x::aasdk::proto::data::TouchConfig::MergeFrom(from._internal_touch_pad_config());
  }
}

void InputChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.data.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputChannel::CopyFrom(const InputChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.data.InputChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputChannel::IsInitialized() const {
  return true;
}

void InputChannel::InternalSwap(InputChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supported_keycodes_.InternalSwap(&other->supported_keycodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputChannel, touch_pad_config_)
      + sizeof(InputChannel::touch_pad_config_)
      - PROTOBUF_FIELD_OFFSET(InputChannel, touch_screen_config_)>(
          reinterpret_cast<char*>(&touch_screen_config_),
          reinterpret_cast<char*>(&other->touch_screen_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::data::InputChannel* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::data::InputChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::data::InputChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
