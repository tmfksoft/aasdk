// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscoveryResponseMessage.proto

#include "ServiceDiscoveryResponseMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ChannelDescriptorData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ChannelDescriptor_ChannelDescriptorData_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {
class ServiceDiscoveryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceDiscoveryResponse> _instance;
} _ServiceDiscoveryResponse_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
static void InitDefaultsscc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::f1x::aasdk::proto::messages::_ServiceDiscoveryResponse_default_instance_;
    new (ptr) ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto}, {
      &scc_info_ChannelDescriptor_ChannelDescriptorData_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ServiceDiscoveryResponseMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ServiceDiscoveryResponseMessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ServiceDiscoveryResponseMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ServiceDiscoveryResponseMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, head_unit_name_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_model_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_year_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, car_serial_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, left_hand_drive_vehicle_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, headunit_manufacturer_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, headunit_model_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, sw_build_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, sw_version_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, can_play_native_media_during_vr_),
  PROTOBUF_FIELD_OFFSET(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse, hide_clock_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::f1x::aasdk::proto::messages::ServiceDiscoveryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::f1x::aasdk::proto::messages::_ServiceDiscoveryResponse_default_instance_),
};

const char descriptor_table_protodef_ServiceDiscoveryResponseMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%ServiceDiscoveryResponseMessage.proto\022"
  "\030f1x.aasdk.proto.messages\032\033ChannelDescri"
  "ptorData.proto\"\341\002\n\030ServiceDiscoveryRespo"
  "nse\0229\n\010channels\030\001 \003(\0132\'.f1x.aasdk.proto."
  "data.ChannelDescriptor\022\026\n\016head_unit_name"
  "\030\002 \001(\t\022\021\n\tcar_model\030\003 \001(\t\022\020\n\010car_year\030\004 "
  "\001(\t\022\022\n\ncar_serial\030\005 \001(\t\022\037\n\027left_hand_dri"
  "ve_vehicle\030\006 \001(\010\022\035\n\025headunit_manufacture"
  "r\030\007 \001(\t\022\026\n\016headunit_model\030\010 \001(\t\022\020\n\010sw_bu"
  "ild\030\t \001(\t\022\022\n\nsw_version\030\n \001(\t\022\'\n\037can_pla"
  "y_native_media_during_vr\030\013 \001(\010\022\022\n\nhide_c"
  "lock\030\014 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ServiceDiscoveryResponseMessage_2eproto_deps[1] = {
  &::descriptor_table_ChannelDescriptorData_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ServiceDiscoveryResponseMessage_2eproto_sccs[1] = {
  &scc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ServiceDiscoveryResponseMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscoveryResponseMessage_2eproto = {
  false, false, descriptor_table_protodef_ServiceDiscoveryResponseMessage_2eproto, "ServiceDiscoveryResponseMessage.proto", 458,
  &descriptor_table_ServiceDiscoveryResponseMessage_2eproto_once, descriptor_table_ServiceDiscoveryResponseMessage_2eproto_sccs, descriptor_table_ServiceDiscoveryResponseMessage_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_ServiceDiscoveryResponseMessage_2eproto::offsets,
  file_level_metadata_ServiceDiscoveryResponseMessage_2eproto, 1, file_level_enum_descriptors_ServiceDiscoveryResponseMessage_2eproto, file_level_service_descriptors_ServiceDiscoveryResponseMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ServiceDiscoveryResponseMessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ServiceDiscoveryResponseMessage_2eproto)), true);
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

void ServiceDiscoveryResponse::InitAsDefaultInstance() {
}
class ServiceDiscoveryResponse::_Internal {
 public:
};

void ServiceDiscoveryResponse::clear_channels() {
  channels_.Clear();
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
}
ServiceDiscoveryResponse::ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_head_unit_name().empty()) {
    head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_head_unit_name(),
      GetArena());
  }
  car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_car_model().empty()) {
    car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_model(),
      GetArena());
  }
  car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_car_year().empty()) {
    car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_year(),
      GetArena());
  }
  car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_car_serial().empty()) {
    car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_serial(),
      GetArena());
  }
  headunit_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headunit_manufacturer().empty()) {
    headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_headunit_manufacturer(),
      GetArena());
  }
  headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headunit_model().empty()) {
    headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_headunit_model(),
      GetArena());
  }
  sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sw_build().empty()) {
    sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sw_build(),
      GetArena());
  }
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sw_version().empty()) {
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sw_version(),
      GetArena());
  }
  ::memcpy(&left_hand_drive_vehicle_, &from.left_hand_drive_vehicle_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_clock_) -
    reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
  // @@protoc_insertion_point(copy_constructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
}

void ServiceDiscoveryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto.base);
  head_unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_year_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&left_hand_drive_vehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_clock_) -
      reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
}

ServiceDiscoveryResponse::~ServiceDiscoveryResponse() {
  // @@protoc_insertion_point(destructor:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceDiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  head_unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_year_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headunit_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceDiscoveryResponse::ArenaDtor(void* object) {
  ServiceDiscoveryResponse* _this = reinterpret_cast< ServiceDiscoveryResponse* >(object);
  (void)_this;
}
void ServiceDiscoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceDiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceDiscoveryResponse& ServiceDiscoveryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceDiscoveryResponse_ServiceDiscoveryResponseMessage_2eproto.base);
  return *internal_default_instance();
}


void ServiceDiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  head_unit_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_year_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_serial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_build_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&left_hand_drive_vehicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_clock_) -
      reinterpret_cast<char*>(&left_hand_drive_vehicle_)) + sizeof(hide_clock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceDiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string head_unit_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_head_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string car_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_car_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string car_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_car_year();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string car_serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_car_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool left_hand_drive_vehicle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          left_hand_drive_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headunit_manufacturer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_headunit_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headunit_model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_headunit_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sw_build = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sw_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sw_version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sw_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool can_play_native_media_during_vr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          can_play_native_media_during_vr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hide_clock = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hide_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceDiscoveryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  // string head_unit_name = 2;
  if (this->head_unit_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_unit_name().data(), static_cast<int>(this->_internal_head_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_head_unit_name(), target);
  }

  // string car_model = 3;
  if (this->car_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_car_model().data(), static_cast<int>(this->_internal_car_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_car_model(), target);
  }

  // string car_year = 4;
  if (this->car_year().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_car_year().data(), static_cast<int>(this->_internal_car_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_car_year(), target);
  }

  // string car_serial = 5;
  if (this->car_serial().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_car_serial().data(), static_cast<int>(this->_internal_car_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_car_serial(), target);
  }

  // bool left_hand_drive_vehicle = 6;
  if (this->left_hand_drive_vehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_left_hand_drive_vehicle(), target);
  }

  // string headunit_manufacturer = 7;
  if (this->headunit_manufacturer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headunit_manufacturer().data(), static_cast<int>(this->_internal_headunit_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_headunit_manufacturer(), target);
  }

  // string headunit_model = 8;
  if (this->headunit_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headunit_model().data(), static_cast<int>(this->_internal_headunit_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_headunit_model(), target);
  }

  // string sw_build = 9;
  if (this->sw_build().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sw_build().data(), static_cast<int>(this->_internal_sw_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sw_build(), target);
  }

  // string sw_version = 10;
  if (this->sw_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sw_version().data(), static_cast<int>(this->_internal_sw_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sw_version(), target);
  }

  // bool can_play_native_media_during_vr = 11;
  if (this->can_play_native_media_during_vr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_can_play_native_media_during_vr(), target);
  }

  // bool hide_clock = 12;
  if (this->hide_clock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_hide_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  return target;
}

size_t ServiceDiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string head_unit_name = 2;
  if (this->head_unit_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_unit_name());
  }

  // string car_model = 3;
  if (this->car_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_model());
  }

  // string car_year = 4;
  if (this->car_year().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_year());
  }

  // string car_serial = 5;
  if (this->car_serial().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_serial());
  }

  // string headunit_manufacturer = 7;
  if (this->headunit_manufacturer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_manufacturer());
  }

  // string headunit_model = 8;
  if (this->headunit_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headunit_model());
  }

  // string sw_build = 9;
  if (this->sw_build().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_build());
  }

  // string sw_version = 10;
  if (this->sw_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());
  }

  // bool left_hand_drive_vehicle = 6;
  if (this->left_hand_drive_vehicle() != 0) {
    total_size += 1 + 1;
  }

  // bool can_play_native_media_during_vr = 11;
  if (this->can_play_native_media_during_vr() != 0) {
    total_size += 1 + 1;
  }

  // bool hide_clock = 12;
  if (this->hide_clock() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceDiscoveryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceDiscoveryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceDiscoveryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
    MergeFrom(*source);
  }
}

void ServiceDiscoveryResponse::MergeFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.head_unit_name().size() > 0) {
    _internal_set_head_unit_name(from._internal_head_unit_name());
  }
  if (from.car_model().size() > 0) {
    _internal_set_car_model(from._internal_car_model());
  }
  if (from.car_year().size() > 0) {
    _internal_set_car_year(from._internal_car_year());
  }
  if (from.car_serial().size() > 0) {
    _internal_set_car_serial(from._internal_car_serial());
  }
  if (from.headunit_manufacturer().size() > 0) {
    _internal_set_headunit_manufacturer(from._internal_headunit_manufacturer());
  }
  if (from.headunit_model().size() > 0) {
    _internal_set_headunit_model(from._internal_headunit_model());
  }
  if (from.sw_build().size() > 0) {
    _internal_set_sw_build(from._internal_sw_build());
  }
  if (from.sw_version().size() > 0) {
    _internal_set_sw_version(from._internal_sw_version());
  }
  if (from.left_hand_drive_vehicle() != 0) {
    _internal_set_left_hand_drive_vehicle(from._internal_left_hand_drive_vehicle());
  }
  if (from.can_play_native_media_during_vr() != 0) {
    _internal_set_can_play_native_media_during_vr(from._internal_can_play_native_media_during_vr());
  }
  if (from.hide_clock() != 0) {
    _internal_set_hide_clock(from._internal_hide_clock());
  }
}

void ServiceDiscoveryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceDiscoveryResponse::CopyFrom(const ServiceDiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceDiscoveryResponse::IsInitialized() const {
  return true;
}

void ServiceDiscoveryResponse::InternalSwap(ServiceDiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  head_unit_name_.Swap(&other->head_unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_model_.Swap(&other->car_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_year_.Swap(&other->car_year_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_serial_.Swap(&other->car_serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_manufacturer_.Swap(&other->headunit_manufacturer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  headunit_model_.Swap(&other->headunit_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_build_.Swap(&other->sw_build_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sw_version_.Swap(&other->sw_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, hide_clock_)
      + sizeof(ServiceDiscoveryResponse::hide_clock_)
      - PROTOBUF_FIELD_OFFSET(ServiceDiscoveryResponse, left_hand_drive_vehicle_)>(
          reinterpret_cast<char*>(&left_hand_drive_vehicle_),
          reinterpret_cast<char*>(&other->left_hand_drive_vehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceDiscoveryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse* Arena::CreateMaybeMessage< ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
