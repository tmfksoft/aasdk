// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceDiscoveryResponseMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryResponseMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryResponseMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ChannelDescriptorData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ServiceDiscoveryResponseMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ServiceDiscoveryResponseMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ServiceDiscoveryResponseMessage_2eproto;
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {
class ServiceDiscoveryResponse;
class ServiceDiscoveryResponseDefaultTypeInternal;
extern ServiceDiscoveryResponseDefaultTypeInternal _ServiceDiscoveryResponse_default_instance_;
}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x
PROTOBUF_NAMESPACE_OPEN
template<> ::f1x::aasdk::proto::messages::ServiceDiscoveryResponse* Arena::CreateMaybeMessage<::f1x::aasdk::proto::messages::ServiceDiscoveryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace f1x {
namespace aasdk {
namespace proto {
namespace messages {

// ===================================================================

class ServiceDiscoveryResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:f1x.aasdk.proto.messages.ServiceDiscoveryResponse) */ {
 public:
  inline ServiceDiscoveryResponse() : ServiceDiscoveryResponse(nullptr) {};
  virtual ~ServiceDiscoveryResponse();

  ServiceDiscoveryResponse(const ServiceDiscoveryResponse& from);
  ServiceDiscoveryResponse(ServiceDiscoveryResponse&& from) noexcept
    : ServiceDiscoveryResponse() {
    *this = ::std::move(from);
  }

  inline ServiceDiscoveryResponse& operator=(const ServiceDiscoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceDiscoveryResponse& operator=(ServiceDiscoveryResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceDiscoveryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceDiscoveryResponse* internal_default_instance() {
    return reinterpret_cast<const ServiceDiscoveryResponse*>(
               &_ServiceDiscoveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceDiscoveryResponse& a, ServiceDiscoveryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceDiscoveryResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceDiscoveryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceDiscoveryResponse* New() const final {
    return CreateMaybeMessage<ServiceDiscoveryResponse>(nullptr);
  }

  ServiceDiscoveryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceDiscoveryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceDiscoveryResponse& from);
  void MergeFrom(const ServiceDiscoveryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceDiscoveryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "f1x.aasdk.proto.messages.ServiceDiscoveryResponse";
  }
  protected:
  explicit ServiceDiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ServiceDiscoveryResponseMessage_2eproto);
    return ::descriptor_table_ServiceDiscoveryResponseMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kHeadUnitNameFieldNumber = 2,
    kCarModelFieldNumber = 3,
    kCarYearFieldNumber = 4,
    kCarSerialFieldNumber = 5,
    kHeadunitManufacturerFieldNumber = 7,
    kHeadunitModelFieldNumber = 8,
    kSwBuildFieldNumber = 9,
    kSwVersionFieldNumber = 10,
    kLeftHandDriveVehicleFieldNumber = 6,
    kCanPlayNativeMediaDuringVrFieldNumber = 11,
    kHideClockFieldNumber = 12,
  };
  // repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::f1x::aasdk::proto::data::ChannelDescriptor* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::f1x::aasdk::proto::data::ChannelDescriptor >*
      mutable_channels();
  private:
  const ::f1x::aasdk::proto::data::ChannelDescriptor& _internal_channels(int index) const;
  ::f1x::aasdk::proto::data::ChannelDescriptor* _internal_add_channels();
  public:
  const ::f1x::aasdk::proto::data::ChannelDescriptor& channels(int index) const;
  ::f1x::aasdk::proto::data::ChannelDescriptor* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::f1x::aasdk::proto::data::ChannelDescriptor >&
      channels() const;

  // string head_unit_name = 2;
  void clear_head_unit_name();
  const std::string& head_unit_name() const;
  void set_head_unit_name(const std::string& value);
  void set_head_unit_name(std::string&& value);
  void set_head_unit_name(const char* value);
  void set_head_unit_name(const char* value, size_t size);
  std::string* mutable_head_unit_name();
  std::string* release_head_unit_name();
  void set_allocated_head_unit_name(std::string* head_unit_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_head_unit_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_head_unit_name(
      std::string* head_unit_name);
  private:
  const std::string& _internal_head_unit_name() const;
  void _internal_set_head_unit_name(const std::string& value);
  std::string* _internal_mutable_head_unit_name();
  public:

  // string car_model = 3;
  void clear_car_model();
  const std::string& car_model() const;
  void set_car_model(const std::string& value);
  void set_car_model(std::string&& value);
  void set_car_model(const char* value);
  void set_car_model(const char* value, size_t size);
  std::string* mutable_car_model();
  std::string* release_car_model();
  void set_allocated_car_model(std::string* car_model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_car_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_car_model(
      std::string* car_model);
  private:
  const std::string& _internal_car_model() const;
  void _internal_set_car_model(const std::string& value);
  std::string* _internal_mutable_car_model();
  public:

  // string car_year = 4;
  void clear_car_year();
  const std::string& car_year() const;
  void set_car_year(const std::string& value);
  void set_car_year(std::string&& value);
  void set_car_year(const char* value);
  void set_car_year(const char* value, size_t size);
  std::string* mutable_car_year();
  std::string* release_car_year();
  void set_allocated_car_year(std::string* car_year);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_car_year();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_car_year(
      std::string* car_year);
  private:
  const std::string& _internal_car_year() const;
  void _internal_set_car_year(const std::string& value);
  std::string* _internal_mutable_car_year();
  public:

  // string car_serial = 5;
  void clear_car_serial();
  const std::string& car_serial() const;
  void set_car_serial(const std::string& value);
  void set_car_serial(std::string&& value);
  void set_car_serial(const char* value);
  void set_car_serial(const char* value, size_t size);
  std::string* mutable_car_serial();
  std::string* release_car_serial();
  void set_allocated_car_serial(std::string* car_serial);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_car_serial();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_car_serial(
      std::string* car_serial);
  private:
  const std::string& _internal_car_serial() const;
  void _internal_set_car_serial(const std::string& value);
  std::string* _internal_mutable_car_serial();
  public:

  // string headunit_manufacturer = 7;
  void clear_headunit_manufacturer();
  const std::string& headunit_manufacturer() const;
  void set_headunit_manufacturer(const std::string& value);
  void set_headunit_manufacturer(std::string&& value);
  void set_headunit_manufacturer(const char* value);
  void set_headunit_manufacturer(const char* value, size_t size);
  std::string* mutable_headunit_manufacturer();
  std::string* release_headunit_manufacturer();
  void set_allocated_headunit_manufacturer(std::string* headunit_manufacturer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_headunit_manufacturer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_headunit_manufacturer(
      std::string* headunit_manufacturer);
  private:
  const std::string& _internal_headunit_manufacturer() const;
  void _internal_set_headunit_manufacturer(const std::string& value);
  std::string* _internal_mutable_headunit_manufacturer();
  public:

  // string headunit_model = 8;
  void clear_headunit_model();
  const std::string& headunit_model() const;
  void set_headunit_model(const std::string& value);
  void set_headunit_model(std::string&& value);
  void set_headunit_model(const char* value);
  void set_headunit_model(const char* value, size_t size);
  std::string* mutable_headunit_model();
  std::string* release_headunit_model();
  void set_allocated_headunit_model(std::string* headunit_model);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_headunit_model();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_headunit_model(
      std::string* headunit_model);
  private:
  const std::string& _internal_headunit_model() const;
  void _internal_set_headunit_model(const std::string& value);
  std::string* _internal_mutable_headunit_model();
  public:

  // string sw_build = 9;
  void clear_sw_build();
  const std::string& sw_build() const;
  void set_sw_build(const std::string& value);
  void set_sw_build(std::string&& value);
  void set_sw_build(const char* value);
  void set_sw_build(const char* value, size_t size);
  std::string* mutable_sw_build();
  std::string* release_sw_build();
  void set_allocated_sw_build(std::string* sw_build);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sw_build();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sw_build(
      std::string* sw_build);
  private:
  const std::string& _internal_sw_build() const;
  void _internal_set_sw_build(const std::string& value);
  std::string* _internal_mutable_sw_build();
  public:

  // string sw_version = 10;
  void clear_sw_version();
  const std::string& sw_version() const;
  void set_sw_version(const std::string& value);
  void set_sw_version(std::string&& value);
  void set_sw_version(const char* value);
  void set_sw_version(const char* value, size_t size);
  std::string* mutable_sw_version();
  std::string* release_sw_version();
  void set_allocated_sw_version(std::string* sw_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sw_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sw_version(
      std::string* sw_version);
  private:
  const std::string& _internal_sw_version() const;
  void _internal_set_sw_version(const std::string& value);
  std::string* _internal_mutable_sw_version();
  public:

  // bool left_hand_drive_vehicle = 6;
  void clear_left_hand_drive_vehicle();
  bool left_hand_drive_vehicle() const;
  void set_left_hand_drive_vehicle(bool value);
  private:
  bool _internal_left_hand_drive_vehicle() const;
  void _internal_set_left_hand_drive_vehicle(bool value);
  public:

  // bool can_play_native_media_during_vr = 11;
  void clear_can_play_native_media_during_vr();
  bool can_play_native_media_during_vr() const;
  void set_can_play_native_media_during_vr(bool value);
  private:
  bool _internal_can_play_native_media_during_vr() const;
  void _internal_set_can_play_native_media_during_vr(bool value);
  public:

  // bool hide_clock = 12;
  void clear_hide_clock();
  bool hide_clock() const;
  void set_hide_clock(bool value);
  private:
  bool _internal_hide_clock() const;
  void _internal_set_hide_clock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:f1x.aasdk.proto.messages.ServiceDiscoveryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::f1x::aasdk::proto::data::ChannelDescriptor > channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr head_unit_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr car_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr car_year_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr car_serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headunit_manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headunit_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_version_;
  bool left_hand_drive_vehicle_;
  bool can_play_native_media_during_vr_;
  bool hide_clock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ServiceDiscoveryResponseMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceDiscoveryResponse

// repeated .f1x.aasdk.proto.data.ChannelDescriptor channels = 1;
inline int ServiceDiscoveryResponse::_internal_channels_size() const {
  return channels_.size();
}
inline int ServiceDiscoveryResponse::channels_size() const {
  return _internal_channels_size();
}
inline ::f1x::aasdk::proto::data::ChannelDescriptor* ServiceDiscoveryResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::f1x::aasdk::proto::data::ChannelDescriptor >*
ServiceDiscoveryResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.channels)
  return &channels_;
}
inline const ::f1x::aasdk::proto::data::ChannelDescriptor& ServiceDiscoveryResponse::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::f1x::aasdk::proto::data::ChannelDescriptor& ServiceDiscoveryResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.channels)
  return _internal_channels(index);
}
inline ::f1x::aasdk::proto::data::ChannelDescriptor* ServiceDiscoveryResponse::_internal_add_channels() {
  return channels_.Add();
}
inline ::f1x::aasdk::proto::data::ChannelDescriptor* ServiceDiscoveryResponse::add_channels() {
  // @@protoc_insertion_point(field_add:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::f1x::aasdk::proto::data::ChannelDescriptor >&
ServiceDiscoveryResponse::channels() const {
  // @@protoc_insertion_point(field_list:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.channels)
  return channels_;
}

// string head_unit_name = 2;
inline void ServiceDiscoveryResponse::clear_head_unit_name() {
  head_unit_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::head_unit_name() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
  return _internal_head_unit_name();
}
inline void ServiceDiscoveryResponse::set_head_unit_name(const std::string& value) {
  _internal_set_head_unit_name(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}
inline std::string* ServiceDiscoveryResponse::mutable_head_unit_name() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
  return _internal_mutable_head_unit_name();
}
inline const std::string& ServiceDiscoveryResponse::_internal_head_unit_name() const {
  return head_unit_name_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_head_unit_name(const std::string& value) {
  
  head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_head_unit_name(std::string&& value) {
  
  head_unit_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}
inline void ServiceDiscoveryResponse::set_head_unit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}
inline void ServiceDiscoveryResponse::set_head_unit_name(const char* value,
    size_t size) {
  
  head_unit_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_head_unit_name() {
  
  return head_unit_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_head_unit_name() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
  return head_unit_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_head_unit_name(std::string* head_unit_name) {
  if (head_unit_name != nullptr) {
    
  } else {
    
  }
  head_unit_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), head_unit_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_head_unit_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return head_unit_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_head_unit_name(
    std::string* head_unit_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (head_unit_name != nullptr) {
    
  } else {
    
  }
  head_unit_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      head_unit_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.head_unit_name)
}

// string car_model = 3;
inline void ServiceDiscoveryResponse::clear_car_model() {
  car_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::car_model() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
  return _internal_car_model();
}
inline void ServiceDiscoveryResponse::set_car_model(const std::string& value) {
  _internal_set_car_model(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}
inline std::string* ServiceDiscoveryResponse::mutable_car_model() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
  return _internal_mutable_car_model();
}
inline const std::string& ServiceDiscoveryResponse::_internal_car_model() const {
  return car_model_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_car_model(const std::string& value) {
  
  car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_car_model(std::string&& value) {
  
  car_model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}
inline void ServiceDiscoveryResponse::set_car_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}
inline void ServiceDiscoveryResponse::set_car_model(const char* value,
    size_t size) {
  
  car_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_car_model() {
  
  return car_model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_car_model() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
  return car_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_car_model(std::string* car_model) {
  if (car_model != nullptr) {
    
  } else {
    
  }
  car_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), car_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_car_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return car_model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_car_model(
    std::string* car_model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (car_model != nullptr) {
    
  } else {
    
  }
  car_model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      car_model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_model)
}

// string car_year = 4;
inline void ServiceDiscoveryResponse::clear_car_year() {
  car_year_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::car_year() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
  return _internal_car_year();
}
inline void ServiceDiscoveryResponse::set_car_year(const std::string& value) {
  _internal_set_car_year(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}
inline std::string* ServiceDiscoveryResponse::mutable_car_year() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
  return _internal_mutable_car_year();
}
inline const std::string& ServiceDiscoveryResponse::_internal_car_year() const {
  return car_year_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_car_year(const std::string& value) {
  
  car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_car_year(std::string&& value) {
  
  car_year_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}
inline void ServiceDiscoveryResponse::set_car_year(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}
inline void ServiceDiscoveryResponse::set_car_year(const char* value,
    size_t size) {
  
  car_year_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_car_year() {
  
  return car_year_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_car_year() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
  return car_year_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_car_year(std::string* car_year) {
  if (car_year != nullptr) {
    
  } else {
    
  }
  car_year_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), car_year,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_car_year() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return car_year_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_car_year(
    std::string* car_year) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (car_year != nullptr) {
    
  } else {
    
  }
  car_year_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      car_year, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_year)
}

// string car_serial = 5;
inline void ServiceDiscoveryResponse::clear_car_serial() {
  car_serial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::car_serial() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
  return _internal_car_serial();
}
inline void ServiceDiscoveryResponse::set_car_serial(const std::string& value) {
  _internal_set_car_serial(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}
inline std::string* ServiceDiscoveryResponse::mutable_car_serial() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
  return _internal_mutable_car_serial();
}
inline const std::string& ServiceDiscoveryResponse::_internal_car_serial() const {
  return car_serial_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_car_serial(const std::string& value) {
  
  car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_car_serial(std::string&& value) {
  
  car_serial_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}
inline void ServiceDiscoveryResponse::set_car_serial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}
inline void ServiceDiscoveryResponse::set_car_serial(const char* value,
    size_t size) {
  
  car_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_car_serial() {
  
  return car_serial_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_car_serial() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
  return car_serial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_car_serial(std::string* car_serial) {
  if (car_serial != nullptr) {
    
  } else {
    
  }
  car_serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), car_serial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_car_serial() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return car_serial_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_car_serial(
    std::string* car_serial) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (car_serial != nullptr) {
    
  } else {
    
  }
  car_serial_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      car_serial, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.car_serial)
}

// bool left_hand_drive_vehicle = 6;
inline void ServiceDiscoveryResponse::clear_left_hand_drive_vehicle() {
  left_hand_drive_vehicle_ = false;
}
inline bool ServiceDiscoveryResponse::_internal_left_hand_drive_vehicle() const {
  return left_hand_drive_vehicle_;
}
inline bool ServiceDiscoveryResponse::left_hand_drive_vehicle() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.left_hand_drive_vehicle)
  return _internal_left_hand_drive_vehicle();
}
inline void ServiceDiscoveryResponse::_internal_set_left_hand_drive_vehicle(bool value) {
  
  left_hand_drive_vehicle_ = value;
}
inline void ServiceDiscoveryResponse::set_left_hand_drive_vehicle(bool value) {
  _internal_set_left_hand_drive_vehicle(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.left_hand_drive_vehicle)
}

// string headunit_manufacturer = 7;
inline void ServiceDiscoveryResponse::clear_headunit_manufacturer() {
  headunit_manufacturer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::headunit_manufacturer() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
  return _internal_headunit_manufacturer();
}
inline void ServiceDiscoveryResponse::set_headunit_manufacturer(const std::string& value) {
  _internal_set_headunit_manufacturer(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}
inline std::string* ServiceDiscoveryResponse::mutable_headunit_manufacturer() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
  return _internal_mutable_headunit_manufacturer();
}
inline const std::string& ServiceDiscoveryResponse::_internal_headunit_manufacturer() const {
  return headunit_manufacturer_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_headunit_manufacturer(const std::string& value) {
  
  headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_headunit_manufacturer(std::string&& value) {
  
  headunit_manufacturer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}
inline void ServiceDiscoveryResponse::set_headunit_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}
inline void ServiceDiscoveryResponse::set_headunit_manufacturer(const char* value,
    size_t size) {
  
  headunit_manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_headunit_manufacturer() {
  
  return headunit_manufacturer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_headunit_manufacturer() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
  return headunit_manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_headunit_manufacturer(std::string* headunit_manufacturer) {
  if (headunit_manufacturer != nullptr) {
    
  } else {
    
  }
  headunit_manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headunit_manufacturer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_headunit_manufacturer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return headunit_manufacturer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_headunit_manufacturer(
    std::string* headunit_manufacturer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (headunit_manufacturer != nullptr) {
    
  } else {
    
  }
  headunit_manufacturer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      headunit_manufacturer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_manufacturer)
}

// string headunit_model = 8;
inline void ServiceDiscoveryResponse::clear_headunit_model() {
  headunit_model_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::headunit_model() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
  return _internal_headunit_model();
}
inline void ServiceDiscoveryResponse::set_headunit_model(const std::string& value) {
  _internal_set_headunit_model(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}
inline std::string* ServiceDiscoveryResponse::mutable_headunit_model() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
  return _internal_mutable_headunit_model();
}
inline const std::string& ServiceDiscoveryResponse::_internal_headunit_model() const {
  return headunit_model_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_headunit_model(const std::string& value) {
  
  headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_headunit_model(std::string&& value) {
  
  headunit_model_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}
inline void ServiceDiscoveryResponse::set_headunit_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}
inline void ServiceDiscoveryResponse::set_headunit_model(const char* value,
    size_t size) {
  
  headunit_model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_headunit_model() {
  
  return headunit_model_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_headunit_model() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
  return headunit_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_headunit_model(std::string* headunit_model) {
  if (headunit_model != nullptr) {
    
  } else {
    
  }
  headunit_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headunit_model,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_headunit_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return headunit_model_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_headunit_model(
    std::string* headunit_model) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (headunit_model != nullptr) {
    
  } else {
    
  }
  headunit_model_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      headunit_model, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.headunit_model)
}

// string sw_build = 9;
inline void ServiceDiscoveryResponse::clear_sw_build() {
  sw_build_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::sw_build() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
  return _internal_sw_build();
}
inline void ServiceDiscoveryResponse::set_sw_build(const std::string& value) {
  _internal_set_sw_build(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}
inline std::string* ServiceDiscoveryResponse::mutable_sw_build() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
  return _internal_mutable_sw_build();
}
inline const std::string& ServiceDiscoveryResponse::_internal_sw_build() const {
  return sw_build_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_sw_build(const std::string& value) {
  
  sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_sw_build(std::string&& value) {
  
  sw_build_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}
inline void ServiceDiscoveryResponse::set_sw_build(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}
inline void ServiceDiscoveryResponse::set_sw_build(const char* value,
    size_t size) {
  
  sw_build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_sw_build() {
  
  return sw_build_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_sw_build() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
  return sw_build_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_sw_build(std::string* sw_build) {
  if (sw_build != nullptr) {
    
  } else {
    
  }
  sw_build_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_build,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_sw_build() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sw_build_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_sw_build(
    std::string* sw_build) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sw_build != nullptr) {
    
  } else {
    
  }
  sw_build_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sw_build, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_build)
}

// string sw_version = 10;
inline void ServiceDiscoveryResponse::clear_sw_version() {
  sw_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceDiscoveryResponse::sw_version() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
  return _internal_sw_version();
}
inline void ServiceDiscoveryResponse::set_sw_version(const std::string& value) {
  _internal_set_sw_version(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}
inline std::string* ServiceDiscoveryResponse::mutable_sw_version() {
  // @@protoc_insertion_point(field_mutable:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
  return _internal_mutable_sw_version();
}
inline const std::string& ServiceDiscoveryResponse::_internal_sw_version() const {
  return sw_version_.Get();
}
inline void ServiceDiscoveryResponse::_internal_set_sw_version(const std::string& value) {
  
  sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceDiscoveryResponse::set_sw_version(std::string&& value) {
  
  sw_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}
inline void ServiceDiscoveryResponse::set_sw_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}
inline void ServiceDiscoveryResponse::set_sw_version(const char* value,
    size_t size) {
  
  sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}
inline std::string* ServiceDiscoveryResponse::_internal_mutable_sw_version() {
  
  return sw_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceDiscoveryResponse::release_sw_version() {
  // @@protoc_insertion_point(field_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
  return sw_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceDiscoveryResponse::set_allocated_sw_version(std::string* sw_version) {
  if (sw_version != nullptr) {
    
  } else {
    
  }
  sw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}
inline std::string* ServiceDiscoveryResponse::unsafe_arena_release_sw_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sw_version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceDiscoveryResponse::unsafe_arena_set_allocated_sw_version(
    std::string* sw_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sw_version != nullptr) {
    
  } else {
    
  }
  sw_version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sw_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.sw_version)
}

// bool can_play_native_media_during_vr = 11;
inline void ServiceDiscoveryResponse::clear_can_play_native_media_during_vr() {
  can_play_native_media_during_vr_ = false;
}
inline bool ServiceDiscoveryResponse::_internal_can_play_native_media_during_vr() const {
  return can_play_native_media_during_vr_;
}
inline bool ServiceDiscoveryResponse::can_play_native_media_during_vr() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.can_play_native_media_during_vr)
  return _internal_can_play_native_media_during_vr();
}
inline void ServiceDiscoveryResponse::_internal_set_can_play_native_media_during_vr(bool value) {
  
  can_play_native_media_during_vr_ = value;
}
inline void ServiceDiscoveryResponse::set_can_play_native_media_during_vr(bool value) {
  _internal_set_can_play_native_media_during_vr(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.can_play_native_media_during_vr)
}

// bool hide_clock = 12;
inline void ServiceDiscoveryResponse::clear_hide_clock() {
  hide_clock_ = false;
}
inline bool ServiceDiscoveryResponse::_internal_hide_clock() const {
  return hide_clock_;
}
inline bool ServiceDiscoveryResponse::hide_clock() const {
  // @@protoc_insertion_point(field_get:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.hide_clock)
  return _internal_hide_clock();
}
inline void ServiceDiscoveryResponse::_internal_set_hide_clock(bool value) {
  
  hide_clock_ = value;
}
inline void ServiceDiscoveryResponse::set_hide_clock(bool value) {
  _internal_set_hide_clock(value);
  // @@protoc_insertion_point(field_set:f1x.aasdk.proto.messages.ServiceDiscoveryResponse.hide_clock)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace proto
}  // namespace aasdk
}  // namespace f1x

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ServiceDiscoveryResponseMessage_2eproto
